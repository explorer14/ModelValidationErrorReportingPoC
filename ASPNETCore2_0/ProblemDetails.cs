using Microsoft.AspNetCore.Mvc.ModelBinding;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Microsoft.AspNetCore.Mvc
{
    //
    // Summary:
    //     A machine-readable format for specifying errors in HTTP API responses based on
    //     https://tools.ietf.org/html/rfc7807.
    public class ProblemDetails
    {
        public ProblemDetails()
        {
        }

        //
        // Summary:
        //     A URI reference [RFC3986] that identifies the problem type. This specification
        //     encourages that, when dereferenced, it provide human-readable documentation for
        //     the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member
        //     is not present, its value is assumed to be "about:blank".
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "type")]
        public string Type { get; set; }

        //
        // Summary:
        //     A short, human-readable summary of the problem type.It SHOULD NOT change from
        //     occurrence to occurrence of the problem, except for purposes of localization(e.g.,
        //     using proactive content negotiation; see[RFC7231], Section 3.4).
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "title")]
        public string Title { get; set; }

        //
        // Summary:
        //     The HTTP status code([RFC7231], Section 6) generated by the origin server for
        //     this occurrence of the problem.
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "status")]
        public int? Status { get; set; }

        //
        // Summary:
        //     A human-readable explanation specific to this occurrence of the problem.
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "detail")]
        public string Detail { get; set; }

        //
        // Summary:
        //     A URI reference that identifies the specific occurrence of the problem.It may
        //     or may not yield further information if dereferenced.
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "instance")]
        public string Instance { get; set; }

        //
        // Summary:
        //     Gets the System.Collections.Generic.IDictionary`2 for extension members.
        //     Problem type definitions MAY extend the problem details object with additional
        //     members. Extension members appear in the same namespace as other members of a
        //     problem type.
        //
        // Remarks:
        //     The round-tripping behavior for Microsoft.AspNetCore.Mvc.ProblemDetails.Extensions
        //     is determined by the implementation of the Input \ Output formatters. In particular,
        //     complex types or collection types may not round-trip to the original type when
        //     using the built-in JSON or XML formatters.
        [JsonExtensionData]
        public IDictionary<string, object> Extensions { get; }
    }

    public class ValidationProblemDetails : ProblemDetails
    {
        public ValidationProblemDetails() : base()
        {
        }

        public ValidationProblemDetails(
            ModelStateDictionary modelStateDictionary)
            : base()
        {
            this.Errors = modelStateDictionary
                .ToDictionary(x => x.Key,
                    y => y.Value.Errors.Select(
                        z => z.Exception.Details()).ToArray());
        }

        [JsonProperty(PropertyName = "errors")]
        public IDictionary<string, string[]> Errors { get; }
    }

    public static class ExceptionExtensions
    {
        public static string Details(this Exception exception)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine(exception.Message);

            while (exception.InnerException != null)
            {
                builder.AppendLine(exception.InnerException.Message);
            }

            builder.AppendLine(exception.StackTrace);

            return builder.ToString();
        }
    }
}